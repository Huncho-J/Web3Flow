{"version":3,"sources":["components/Navbar.js","components/App.js","reportWebVitals.js","index.js"],"names":["Navbar","web3Handler","account","className","href","target","rel","slice","onClick","App","useState","networkId","setNetworkId","otherNetwork","setOtherNetwork","ethProvider","setETHProvider","mumbaiProvider","setPolyProvider","ethBridge","setETHBridge","polyBridge","setPolyBridge","ethToken","setETHToken","polyToken","setPolyToken","setAccount","ethSigner","setETHSigner","polySigner","setPolySigner","amount","setAmount","isLoading","setIsLoading","hasProcessed","setHasProcessed","message","setMessage","loadWeb3","a","console","log","window","ethereum","networkVersion","ethers","providers","Web3Provider","JsonRpcProvider","process","getSigner","loadContracts","on","chainId","location","reload","accounts","Contract","ETHBridge","networks","address","abi","PolyBridge","token","ethTokenAddress","ETHToken","polyTokenAddress","PolyToken","from","to","date","nonce","signature","step","polyWallet","Wallet","connect","bridge","mint","ethWallet","request","method","bridgeHandler","amountInWei","utils","parseUnits","toString","transferCount","id","hashedMessage","solidityKeccak256","Number","other","arrayify","signMessage","burn","addTokenHandler","params","type","options","symbol","decimals","changeNetworkHandler","useEffect","style","display","justifyContent","alignItems","minHeight","Spinner","animation","Row","onChange","e","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9114fbcc.chunk.js","sourcesContent":["\nconst Navbar = ({ web3Handler, account }) => {\n    return (\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n            <a\n                className=\"navbar-brand col-sm-3 col-md-2 mr-0 mx-3\"\n                href=\"\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                Web3Flow\n            </a>\n\n            {account ? (\n                <a\n                    href={`https://etherscan.io/address/${account}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"button nav-button btn-sm mx-4\">\n                    {account.slice(0, 5) + '...' + account.slice(38, 42)}\n                </a>\n            ) : (\n                <button onClick={web3Handler} className=\"button nav-button btn-sm mx-4\">Connect Wallet</button>\n            )}\n        </nav>\n    );\n}\n\nexport default Navbar;","import { useState, useEffect } from 'react'\nimport { Row, Spinner } from 'react-bootstrap'\nimport { ethers } from \"ethers\"\nimport './App.css'\n\n// Import Components\nimport Navbar from './Navbar'\n\n// Import Contract's ABIS\nimport ETHToken from '../abis/ETHToken.json';\nimport ETHBridge from '../abis/ETHBridge.json';\nimport PolyToken from '../abis/PolyToken.json';\nimport PolyBridge from '../abis/PolyBridge.json';\n\nfunction App() {\n\tconst [networkId, setNetworkId] = useState(null)\n\tconst [otherNetwork, setOtherNetwork] = useState(\"\")\n\n\tconst [ethProvider, setETHProvider] = useState(null)\n\tconst [mumbaiProvider, setPolyProvider] = useState(null)\n\n\tconst [ethBridge, setETHBridge] = useState(null)\n\tconst [polyBridge, setPolyBridge] = useState(null)\n\n\tconst [ethToken, setETHToken] = useState(null)\n\tconst [polyToken, setPolyToken] = useState(null)\n\n\tconst [account, setAccount] = useState(null)\n\tconst [ethSigner, setETHSigner] = useState(null)\n\tconst [polySigner, setPolySigner] = useState(null)\n\n\tconst [amount, setAmount] = useState(0)\n\n\tconst [isLoading, setIsLoading] = useState(true)\n\tconst [hasProcessed, setHasProcessed] = useState(false)\n\tconst [message, setMessage] = useState(\"Awaiting MetaMask Connection...\")\n\n\tconst loadWeb3 = async () => {\n\t\tconsole.log('called')\n\n\t\tif (window.ethereum.networkVersion === '4') {\n\t\t\t// Set provider for Rinkeby (MetaMask)\n\t\t\tconst ethProvider = new ethers.providers.Web3Provider(window.ethereum)\n\t\t\tsetETHProvider(ethProvider)\n\n\t\t\t// Set provider for Polygon mumbai Testnet\n\t\t\tconst mumbaiProvider = new ethers.providers.JsonRpcProvider(`https://polygon-mumbai.infura.io/v3/${process.env.REACT_APP_INFURA_API_KEY}`)\n\t\t\tsetPolyProvider(mumbaiProvider)\n\n\t\t\t// Set signer Account\n\t\t\tconst ethSigner = ethProvider.getSigner()\n\t\t\tsetETHSigner(ethSigner)\n\n\t\t\tsetOtherNetwork(\"Mumbai\")\n\n\t\t\tawait loadContracts()\n\t\t}\n\n\t\tif (window.ethereum.networkVersion === '80001') {\n\t\t\t// Set provider for Polygon Mumbai Testnet (MetaMask)\n\t\t\tconst mumbaiProvider = new ethers.providers.Web3Provider(window.ethereum)\n\t\t\tsetPolyProvider(mumbaiProvider)\n\n\t\t\t// Set provider for Rinkeby\n\t\t\tconst ethProvider = new ethers.providers.JsonRpcProvider(`https://rinkeby.infura.io/v3/${process.env.REACT_APP_INFURA_API_KEY}`)\n\t\t\tsetETHProvider(ethProvider)\n\n\t\t\t// Set signer\n\t\t\tconst polySigner = mumbaiProvider.getSigner()\n\t\t\tsetPolySigner(polySigner)\n\n\t\t\tsetOtherNetwork(\"Rinkeby\")\n\n\t\t\tawait loadContracts()\n\t\t}\n\n\t\twindow.ethereum.on('chainChanged', (chainId) => {\n\t\t\twindow.location.reload();\n\t\t})\n\n\t\twindow.ethereum.on('accountsChanged', function (accounts) {\n\t\t\tsetAccount(accounts[0])\n\t\t})\n\t}\n\n\tconst loadContracts = async () => {\n\t\tif (!ethProvider && !mumbaiProvider) {\n\t\t\treturn\n\t\t}\n\n\t\tif (networkId !== '5777') {\n\t\t\tsetMessage(\"Loading Contracts...\")\n\n\t\t\tconst ethBridge = new ethers.Contract(ETHBridge.networks[4].address, ETHBridge.abi, ethProvider)\n\t\t\tsetETHBridge(ethBridge)\n\n\t\t\tconst polyBridge = new ethers.Contract(PolyBridge.networks[80001].address, PolyBridge.abi, mumbaiProvider)\n\t\t\tsetPolyBridge(polyBridge)\n\n\t\t\tconst ethTokenAddress = await ethBridge.token()\n\t\t\tconst ethToken = new ethers.Contract(ethTokenAddress, ETHToken.abi, ethProvider)\n\t\t\tsetETHToken(ethToken)\n\n\t\t\tconst polyTokenAddress = await polyBridge.token()\n\t\t\tconst polyToken = new ethers.Contract(polyTokenAddress, PolyToken.abi, mumbaiProvider)\n\t\t\tsetPolyToken(polyToken)\n\n\t\t\t//CURRENTLY WORKING ON UPDATING THIS LOGIC WITH CHAINLINK KEEPERS\n\t\t\t// Depending on the network, we listen for when tokens are burned from the bridgeto mint \n\t\t\t// tokens on the other network... This is only for demonstration, for security it's more ideal to\n\t\t\t// have this specific logic on a server somewhere else, with a more secure implementation in place\n\t\t\t// incase of potential downtime (or if a user refreshes the page)!\n\n\t\t\t// If networkId === 4 (Rinkeby), listen to transfer events from the ETHBridge, then make a call to PolyBridge\n\t\t\tif (networkId === '4') {\n\t\t\t\tethBridge.on('Transfer', async (from, to, amount, date, nonce, signature, step) => {\n\t\t\t\t\tconst polyWallet = new ethers.Wallet(process.env.REACT_APP_PRIVATE_KEY)\n\t\t\t\t\tconst polySigner = polyWallet.connect(mumbaiProvider)\n\t\t\t\t\tconst bridge = polyBridge.connect(polySigner)\n\n\t\t\t\t\t// Call mint function from here...\n\t\t\t\t\tawait bridge.mint(from, to, amount, nonce, signature)\n\n\t\t\t\t\tsetHasProcessed(true)\n\t\t\t\t\tsetIsLoading(false)\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t// If networkId === 80001 (Mumbai Testnet), listen to transfer events from the PolyBridge, then make a call to ETHBridge\n\t\t\tif (networkId === '80001') {\n\t\t\t\tpolyBridge.on('Transfer', async (from, to, amount, date, nonce, signature, step) => {\n\t\t\t\t\tconst ethWallet = new ethers.Wallet(process.env.REACT_APP_PRIVATE_KEY)\n\t\t\t\t\tconst ethSigner = ethWallet.connect(ethProvider)\n\t\t\t\t\tconst bridge = ethBridge.connect(ethSigner)\n\n\t\t\t\t\t// Call mint function from here...\n\t\t\t\t\tawait bridge.mint(from, to, amount, nonce, signature)\n\n\t\t\t\t\tsetHasProcessed(true)\n\t\t\t\t\tsetIsLoading(false)\n\t\t\t\t})\n\t\t\t}\n\t\t} else {\n\t\t\treturn\n\t\t}\n\t\tsetIsLoading(false)\n\t}\n\n\t// MetaMask Login/Connect\n\tconst web3Handler = async () => {\n\t\tconst accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\t\tsetAccount(accounts[0])\n\t\tsetNetworkId(window.ethereum.networkVersion)\n\t}\n\n\tconst bridgeHandler = async () => {\n\t\tconst amountInWei = ethers.utils.parseUnits(amount.toString(), 'ether')\n\n\t\tif (networkId === '4') { // Rinkeby\n\t\t\t// Connect account with contract...\n\t\t\tconst bridge = await ethBridge.connect(ethSigner)\n\t\t\tconst id = await bridge.transferCount(account)\n\n\t\t\t// Create hash message, and have user sign it...\n\t\t\tconst hashedMessage = ethers.utils.solidityKeccak256([\"address\", \"uint256\", \"uint256\"], [account, amountInWei, (Number(id) + 1)])\n\t\t\tconst other = ethers.utils.arrayify(hashedMessage)\n\t\t\tconst signature = await ethSigner.signMessage(other)\n\n\t\t\tsetMessage(\"Bridging over... Do NOT refresh the page!\")\n\t\t\tsetIsLoading(true)\n\n\t\t\t// Burn tokens...\n\t\t\tawait bridge.burn(account, amountInWei, signature)\n\t\t}\n\n\t\tif (networkId === '80001') { // Mumbai Testnet\n\t\t\t// Connect account with contract...\n\t\t\tconst bridge = await polyBridge.connect(polySigner)\n\t\t\tconst id = await bridge.transferCount(account)\n\n\t\t\t// Create hash message, and have user sign it...\n\t\t\tconst hashedMessage = ethers.utils.solidityKeccak256([\"address\", \"uint256\", \"uint256\"], [account, amountInWei, (Number(id) + 1)])\n\t\t\tconst other = ethers.utils.arrayify(hashedMessage)\n\t\t\tconst signature = await polySigner.signMessage(other)\n\n\t\t\tsetMessage(\"Bridging over... Do NOT refresh the page!\")\n\t\t\tsetIsLoading(true)\n\n\t\t\t// Burn tokens...\n\t\t\tawait bridge.burn(account, amountInWei, signature)\n\t\t}\n\t}\n\n\tconst addTokenHandler = async () => {\n\t\tlet address\n\n\t\tif (networkId === '4') { // Rinkeby\n\t\t\taddress = ethToken.address\n\t\t}\n\n\t\tif (networkId === '80001') { // Mumbai Testnet\n\t\t\tconsole.log(polyToken)\n\t\t\taddress = polyToken.address\n\t\t}\n\n\t\tawait window.ethereum.request({\n\t\t\tmethod: 'wallet_watchAsset',\n\t\t\tparams: {\n\t\t\t\ttype: 'ERC20',\n\t\t\t\toptions: {\n\t\t\t\t\taddress: address,\n\t\t\t\t\tsymbol: \"TCT\",\n\t\t\t\t\tdecimals: 18,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t}\n\n\tconst changeNetworkHandler = async () => {\n\t\tlet chainId\n\n\t\tif (networkId === '4') { // Rinkeby\n\t\t\tchainId = '0x13881'\n\t\t}\n\n\t\tif (networkId === '80001') { // Mumbai Testnet\n\t\t\tchainId = '0x4'\n\t\t}\n\n\t\tawait window.ethereum.request({\n\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\tparams: [{ chainId: chainId }],\n\t\t})\n\t}\n\n\tuseEffect(() => {\n\t\tloadWeb3()\n\t}, [account, networkId]);\n\n\treturn (\n\t\t<div className=\"App\">\n\n\t\t\t<Navbar web3Handler={web3Handler} account={account} />\n\n\t\t\t{isLoading ? (\n\t\t\t\t<div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}>\n\t\t\t\t\t<Spinner animation=\"border\" style={{ display: 'flex' }} />\n\t\t\t\t\t<p className='mx-3 my-0'>{message}</p>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<main className='p-3'>\n\t\t\t\t\t<h1 className='my-4' >Web3Flow Dapp</h1>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<Row className='text-center'>\n\t\t\t\t\t\t<p>Bridge your $TCT between Rinkeby and Mumbai Polygon</p>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input type=\"number\" onChange={(e) => { setAmount(e.target.value) }} placeholder='Enter amount' />\n\t\t\t\t\t\t\t<button onClick={bridgeHandler} className='button btn-sm mx-3'>{`Bridge to ${otherNetwork}`}</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<Row className='text-center'>\n\t\t\t\t\t\t{networkId === '4' ? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p>Currently connected to Rinkeby</p>\n\t\t\t\t\t\t\t\t<button onClick={addTokenHandler} className='button btn-sm p-2'>Add Token to MetaMask</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : networkId === '80001' ? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p>Currently connected to Polygon Mumbai Testnet</p>\n\t\t\t\t\t\t\t\t<button onClick={addTokenHandler} className='button btn-sm p-2'>Add Token to MetaMask</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p>Unidentified network, please connect to Rinkeby or Mumbai Testnet</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Row>\n\t\t\t\t\t{hasProcessed ? (\n\t\t\t\t\t\t<Row></Row>\n\t\t\t\t\t): (\n\t\t\t\t\t\t<Row className='text-center'>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<button onClick={changeNetworkHandler} className='button btn-sm'>Switch Network</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t) }\n\t\t\t\t</main>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}